#!/usr/bin/env node
require("dotenv").config();
/**
 * Module dependencies.
 */

const hostApp = "http://192.168.1.8:19000";
const hostAdmin = "https://admin-freshgreen.vercel.app";
const hostClient = "http://freshgreen.io.vn";

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const mongoose = require("mongoose");
const socketIo = require("socket.io");
const { socketHandler } = require("../handlers/socketConnect");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: [hostClient, hostAdmin, hostApp],
    credentials: true,
  },
});

/**
 * Listen on provided port, on all network interfaces.
 */
mongoose
  .connect(process.env.MONGO_DB, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("Server connected successfully");
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    io.on("connection", (socket) => {
      socketHandler(socket);

      socket.on("disconnect", (reason) => {
        if (reason === "io server disconnect") {
          socket.connect();
        }
      });
    });
  })
  .catch((err) => {
    console.log(err);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
